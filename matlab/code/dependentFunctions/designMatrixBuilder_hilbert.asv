[glmModel] = designMatrixBuilder_hilbert(glmModel,selectedFeatures);

%selectedFeatures is a vector with values corresponding to the values in
%the DmatFields 

DmatFields = fields(glmModel{1}.io.components);

for i = 1:length(glmModel)
    
    for g = 1:length(selectedFeatures)
        DmatFields{g}
    
    DmatX = [repmat(touchShiftIdx,length(touchIdx),1) phase_conv(shiftIdx') amplitude_conv(shiftIdx') midpoint_conv(shiftIdx') curvature_conv(shiftIdx')];
    DmatY = glmModel{i}.io.DmatY; 
    
    [row,~] = find(isnan(DmatX));
    trialsToRemove = unique(ceil(row./length(glmnetOpt.buildIndices)));
    trialsToRemoveIdx = (length(glmnetOpt.buildIndices)*(trialsToRemove-1)) + (1:(length(glmnetOpt.buildIndices))) ;
    DmatX(trialsToRemoveIdx,:) = [] ;
    DmatY(trialsToRemoveIdx,:) = [] ;
    
    
    
    
    glmModel{i}.io.DmatX = DmatX;
    glmModel{i}.io.DmatY = DmatY; 
    glmModel{i}.io.DmatXNormalized = (DmatX - mean(DmatX)) ./ std(DmatX);
    
    glmModel{i}.raw.trimmedAngle = glmModel{i}.raw.angle;
    glmModel{i}.raw.trimmedAngle(trialsToRemove) = [];
    
end