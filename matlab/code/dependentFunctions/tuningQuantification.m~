function tuningStruct = tuningQuantification(cellStruct,popV,selectedCells,variableFields,touchOrderFields,viewWindow,displayOpt)

%% ZSCORE CONVERSION and tuning width


% thetabounds = linspace(pi*-1,pi,13);
bounds = popV{1}.allTouches.(variableFields{1}).bounds;

if (nargin < 7), displayOpt = 'on'; end
willdisplay = ~(strcmp(displayOpt,'nodisplay') | strcmp(displayOpt,'n') ...
    | strcmp(displayOpt,'off'));

if (willdisplay)
    [rc] = numSubplots(length(selectedCells));
    plotrow = rc(1);
    plotcolumn = rc(2);
end

tunedCellMat =  nan(length(touchOrderFields),length(popV));

for g = 1:numel(touchOrderFields)
    
    fr= nan(length(selectedCells),2);
    pw=fr;
    pwzs = nan(length(selectedCells),50);
    pwtheta = nan(length(selectedCells),2);
    numInterpPts = 16;
    
    for d = 1:length(selectedCells)
        
        %ZSCORREEEEE
        currCell = selectedCells(d);
        
        pOn = round(cellStruct{currCell}.meta.poleOnset(1)*1000);
        restW(d) = nanmean(nanmean(cellStruct{currCell}.S_ctk(1,1:pOn,:)));
        
        counts = popV{currCell}.(touchOrderFields{g}).(variableFields{1}).counts;
        ranges = popV{currCell}.(touchOrderFields{g}).(variableFields{1}).range ;
        thetavect = [];
        for k = 1:length(ranges)
            thetavect = [thetavect ;ones(counts(k),1).*ranges(k)];
        end
        tvectNorm = normalize_var(thetavect,-1,1);
        
        allspikes = cell2mat(popV{currCell}.(touchOrderFields{g}).(variableFields{1}).raw);
        meanbase = mean(mean(allspikes(:,1:find(viewWindow==0)),2));
        stdbase = std(mean(allspikes(:,1:find(viewWindow==0)),2));
        %     postresponses = allspikes(:,find(window==0)+5:find(window==0)+35);
        postresponses = allspikes(:,find(viewWindow==0)+ cellStruct{currCell}.meta.responseWindow(1) : find(viewWindow==0)+cellStruct{currCell}.meta.responseWindow(2));
        
        xresp = mean(postresponses,2);
        zscore = (xresp - meanbase) ./ stdbase;
        
        [sortedZscores,~,~] = binslin(thetavect,zscore,'equalE',numel(bounds),bounds(1),bounds(end));
        [sortedRawResponse] = binslin(thetavect,xresp,'equalE',numel(bounds),bounds(1),bounds(end)); 
        
        samps = cellfun(@numel,sortedZscores);
        selBins = find(samps>sum(samps)./100);
        
        zraw = transpose(cell2nanmat(sortedZscores));
        rrnanmat = transpose(cell2nanmat(sortedRawResponse)); 
        
        selBinMat = nan(size(zraw));
        selBinMat(selBins,:) = 1;
        
        zraw = zraw .* selBinMat; 
        rraw = rrnanmat .* selBinMat; 

        rawmeanresp =  mean(rraw,2);
        rawSEM = nanstd(rraw,[],2) ./ sqrt(sum(~isnan(rraw),2)); 
        
        %sig calculation 
        [pZ,~,stats]=anova1(zraw',[],'off');
        pRaw = anova1(rraw',[],'off');
        
        vals =multcompare(stats,[],'off');
        x=cellfun(@str2num,stats.gnames);
        
        %CI BINS for zscores
        cibins = nan(size(x,1),1);
        
        SEMg = nanstd(zraw,[],2) ./ sqrt(sum(~isnan(zraw),2));
        for i = 1:length(x)
            rawx = zraw(x(i),:);
            SEM = SEMg(x(i));
            ts = tinv(.95,sum(~isnan(rawx),2)-1);      % T-Score
            cibins(i,:) = ts.*SEM;   %confidence intervals
        end
        
        
        y = stats.means;
        %     ytune(x,d) = y;  %FOR PHASE
        
        x=bounds(x)';
        
        
        zstd = nanstd(zraw,[],2);
        ystd = zstd(~isnan(zstd))';
        
        xy = [x y'];
        
        kxy{d} = xy;
        
        if willdisplay
            figure(390+g)
            subplot(plotrow,plotcolumn,d);
            shadedErrorBar(xy(:,1),xy(:,2),cibins,'-k');
            %     scatter(xy(:,1),xy(:,2),[],[.7 .7 .7],'filled')
            set(gca,'ytick',round(min(xy(:,2))-1):round(max(xy(:,2))+1),'ylim',[round(min(xy(:,2))-1) round(max(xy(:,2))+1)],...
                'xlim',[min(xy(:,1)) max(xy(:,1))],'xtick',-20:20:60)
            axis square
        end
        
        nxy = [normalize_var(x,0,1),y'];
        
        zs = nanmean(zraw,2);
        zs(isnan(zs))=[];
        
        sigs =  vals(vals(:,end)<.01,:);
        
        clear peaksig
        [~,maxidx]=max(zs);
        midxsel = find(sum(sigs(:,[1 2])==maxidx,2)==1);
        
        if sum(midxsel>0)
            peaksig = sigs(midxsel,1:2);
            
            [~,midx] = min(abs(diff(peaksig')));
            pw(d,:) = peaksig(midx,:);
            if willdisplay
                figure(390+g);
                hold on; scatter(xy(peaksig(midx,:),1),xy(peaksig(midx,:),2),[],'filled','g')
            end
            
            raws=zs(pw(d,1):pw(d,2));
            pwzs(d,1:length(raws)) = raws;
            pwtheta(d,:) = x(pw(d,:));
        end
        
        tuningXYerr{d} = [xy cibins rawmeanresp rawSEM];
    end
    
    
    ocellidx = find(~isnan(pw(:,1)));
    tunedCellMat(g,selectedCells(ocellidx)) = 1;
    
    tuningStruct.valueNames = {'stimulus', 'zresp','CIbinsZ','meanResponse','responseSEM'};
    tuningStruct.values.(touchOrderFields{g}) = tuningXYerr; 
end

tuningStruct.populationQuant.rowFeatNames = touchOrderFields;
tuningStruct.populationQuant.matrix = tunedCellMat; 


